Александр Михальцевич
+375297639382


1) Notepa
2) IDE PHPShtorm
3) Если работы в интернет- FTP
4) Firefox 
5) Firebug
6) GIT и  GITHub

Включение в HTML
<html>
<head>
1)<script type='text/javascript'></script>
2)<script src='as.js'>
</head>
</html>

Определение переменных(.js):

var a;
var a="text";
var a,b,c,d;
/*Если есть ключевое слово var то это локальная переменная только для это страницы, если не указать  var то это переменная станет глобальной. Нельзя для переменной использовать зарезервированные слова. Имена могу быть a-z и A-Z 0-9 _ $ переменные должны начинаться только с буквы. Строка определяется в скобках ''. 
Типы данных в переменных:
1) NUMBER
2) String
3) Bulean(true или false)
4) Object
5) Array. Например c =['a','b,]
6) Erorr
7) Date
8) Function
9) c=function() {тело}
10) NULL
11) Andefined
С помощью typeof мы можем узнать к какому типу принадледжит переменная( Например typeof a)*/




                              <-----Состав языка javascript----->





1. -----------Инструкции(Instruction) - выражение в результате которого должно выполниться действие



var a ='text';
Инструкции могут выполняться блоками:
{x=Math Pi;
 y=Math.cos(x);}
Это можно присвоить объектному литералу:
с={x=Math Pi;
   y=Math.cos(x);}
Пример объектного литерала
var a={
	'myage':31
	'myfunc':function(){...}
	'myname':'Alex'
}

Чтобы вызвать нужно a.myfunc . В объктном литерале могут храниться разные данные в том числе функции.(вызов a.myage)

Объявление функции:

function=myFunc(){тело функции}
Функция может иметь входные параметры
Функцию также можно задать через класс myFunc=new Function(){}
Вызов функции
myFunc()

Самая простая инструкция:

if (n=1){
	выполнить первый блок
} else i(n=2) 
else{
	
}
//Если много условий, то лучше использвать switch:
switch(n){
	case 1: если n=1 то выполнить этот блок;
	break;
	cade 2: авыполнятеся второй блок;
	break;
	default: блок по умолчанию;
}

Инструкция while:

var count=0;
while count<10{
	consolelog(count) // выводим на экран count
	count++ // увеличение на 1
}

do {
	count++
}

Инструкция For:

a) for(var count=0//начальное значение//; count<10//окончание//; count++//прибавление +1 к счетчику//){
	consolelog(count);
	if(count=5){
	break; //выход из цикла
	} 

}

b) for (p in o){   //проверяет наличие p в объекте o
	
}

Кроме break есть continue

for(var count=0; count<10; count++){
	consolelog(count);
	if(count=5){
	 
	} 
continue;
consolelog(count)
}  //выведет все цифры до 5 а потом продолжит с 6, т.е. выведет все числа от 1 до 10, кроме 5


Инструкция try{
	
}

Инструкция catch(e){
	logError(e)
}

Инструкция finali{
	
}

Инструкция особый способ if
if(x>y){
	var z='x больше y';
} else {
	var  z'x меньше y';
}
Можно записать
var z= x>y? //одновременно проверяем x больше или меньше y




2. --------------------Объекты. Объектом может быть любое значение кроме true,false



   Создание объктов:
   a) Литералы  //чаще всего используется
   b) New
   c) object.create();

  a) var empty={}
     var point={'x':0,'y':1}
     var book ={
     'title': 'JavaScript'
     'author':{
     'firstname':'David'
     'surname':'Flanagan'
     }
     }//объект book первое значение title а второе значение тоже объект

   b) Через ключевое слово new
   	  var o= new Oblect();
   	  var a= new Array(); //но это не используется потому что может задаваться отдельно
   	  var d= new Date();
   	  var r= new RegExp('параметр');
   	  var z= new Functio()
   с) Через object
      var o= Object.create({'x':1,'y':2});

Прототип var a= new Array()  на него можно сослаться object.prototype array.prototype используется для проверки типо объекта.

Свойства объекта: к свойствам объекта можно ссылаится:
book.author
book['author']
чтобы удалить свойство
delete book.author
проверка нахождения свойства в объекте
in "x" in o


var o={x:1,'y':2,'z':3}
for(p in o)     //проходим весь массив и выводим на отображение p
consolelog(p);

var s=json.stringify(o);
если через consolelos(s) получим код:
'{x:1,y:2,z:3}' Т.е. мы объект превращаем в строку
Чтобы строку обратно вернуть в объект нужно выполнить:
p=json.parse(s)


----------Массивы- частный случай объектов

var empty =[];
var primes=[2,3,5,10];
var mise=[               //смешанный массив
1.1,                    //число с плавающей точкой
true,
'string',
[1,3,4,5]             //массив в массиве
]

Главное отличие массива от объекта в том, что любой массив имеет свойство lenght. Мы всегда можем узнать длину массива:
miss.lenght  //вернет 5
Пример
var empty=[]
Добалвение значения в конец массива:
var empty=[];
empty.push('zent');
empty.push('1',2,5);
empty['my key']='ab';
Добавление в начало:
empty.shift
Удаление из массива:
delete empty['my key']
delete удаляет элемент, но не изменяет длину массива.Если обратиться к удаленному undefineted

Как пройтись по телу массива:
Имеем массив а

for(var:=0;i<a.lenght;i+1){
	a[i]
}

Если переменная не существует тогда нужно:

for(var:=0;i<a.lenght;i+1){
if (!=a[i]) continue
	a[i]
}

Матрица
var matrix=[
[3,3,3,]
[4,4,4,]
[5,5,5]
]


Методы для работы с массивами:
a) .join
var a=[1,2,3];
a.join() //выводит строку "1,2,3"

a.join("")   //выведет "123"
a.join("-")  //выводит "1-2-3"

var b=(=new Array(10)
b.join("-")        //выведеот 10  -
b) .revers
a.revers()  // "3,2,1"
c) .sort возвращает сортированный массив
d) .concat 
a.concat(4,5) //добавили 4,5
e) .slice
a.slice(0,3) // возрат с нулевого элемента трех значений
f) .forEach 
   a.forEach(function(value)){  // все элементы массива загоняем в функцию

   }
g) .map разница между forEach -  в map должен быть return
  a.map(function)

h) .filter
  a.filter(function(x)){
  return x<3              // на выходе  "1,2"
  }
 i) .every
  a.every(function(x)){
  return x<10             //возращает true  потому что все элементы в массиве меньше 10
  }
g) .some
a.some(function(x)){
	return x=2        //возращает true  если удовлетворяет хотя бы одному условию 
}

k).reduce(function(x))  //объеденяет элементы массива использую указанную функцию
l).iaArray //выполняет проверку является ли объект массивом
























